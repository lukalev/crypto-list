{"version":3,"sources":["actions/index.js","reducers/index.js","containers/Currency.js","containers/CurrencyList.js","containers/Button.js","containers/ButtonDetails.js","components/Article.js","components/ArticleDetails.js","containers/ArticleList.js","App.js","serviceWorker.js","index.js"],"names":["requestCurrency","currency","type","requestPosts","receivedPosts","json","requestPost","receivedPost","requestQuote","receivedQuote","toggleArticle","show","fetchPosts","dispatch","fetch","concat","then","response","error","console","log","data","reducer","state","arguments","length","undefined","action","Object","objectSpread","article","loading","quotes","assign","showSettings","Boolean","showArticle","Currency","_ref","CurrencyName","CurrencyString","getCurrency","active","id","react_default","a","createElement","className","onClick","style","backgroundColor","mapDispatchToProps","connect","CurrencyList","toggle","settings","containers_Currency","Button","getPosts","ButtonDetails","getPost","title","fetchPost","fetchQuote","Article","rank","symbol","get","containers_ButtonDetails","ArticleDetails","name","ArticleList","articles","list","components_ArticleDetails","map","key","components_Article","App","containers_CurrencyList","containers_Button","containers_ArticleList","window","location","hostname","match","store","createStore","applyMiddleware","thunk","logger","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.172cff86.chunk.js","sourcesContent":["export const SELECT_CURRENCY= 'SELECT_CURRENCY';\nexport const REQUEST_POSTS = 'REQUEST_POSTS';\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS';\nexport const REQUEST_POST = 'REQUEST_POST';\nexport const RECEIVE_POST = 'RECEIVE_POST';\nexport const REQUEST_QUOTE = 'REQUEST_QUOTE';\nexport const RECEIVE_QUOTE = 'RECEIVE_QUOTE';\nexport const TOGGLE_SETTINGS = 'TOGGLE_SETTINGS';\nexport const TOGGLE_ARTICLE = 'TOGGLE_ARTICLE';\n\nexport const requestCurrency = currency => ({\n  type: SELECT_CURRENCY,\n  currency,\n});\n\nexport const requestPosts = () => ({\n  type: REQUEST_POSTS,\n});\n\nexport const receivedPosts = json => ({\n  type: RECEIVE_POSTS,\n  json: json,\n});\n\nexport const requestPost = () => ({\n  type: REQUEST_POST,\n});\n\nexport const receivedPost = json => ({\n  type: RECEIVE_POST,\n  json: json,\n}); \n\nexport const requestQuote = () => ({\n  type: REQUEST_QUOTE,\n});\n\nexport const receivedQuote = json => ({\n  type: RECEIVE_QUOTE,\n  json: json,\n}); \n\nexport const toggleSettings = () => ({\n  type: TOGGLE_SETTINGS\n});\n\nexport const toggleArticle = show => ({\n  type: TOGGLE_ARTICLE,\n  show: show,\n});\n\nexport function fetchPosts(currency) {\n  return function (dispatch) {\n    dispatch(toggleArticle(false));\n    dispatch(requestPosts());\n    return fetch(`https://api.coinmarketcap.com/v2/ticker/?limit=10&structure=array&convert=${currency}`)\n      .then(\n      response => response.json(),\n      error => console.log('An error occurred.', error),\n    )\n      .then((json) => {\n        dispatch(receivedPosts(json.data));\n      },\n    );\n  };\n}\n\nexport function fetchPost(currency, id) {  \n  return function (dispatch) {\n    dispatch(toggleArticle(false));\n    dispatch(requestPost(id));\n    return fetch(`https://api.coinmarketcap.com/v2/ticker/${id}/?structure=array&convert=${currency}`)\n      .then(\n      response => response.json(),\n      error => console.log('An error occurred.', error),\n    )\n      .then((json) => {\n        dispatch(receivedPost(json));\n        dispatch(toggleArticle(true));\n      },\n    );\n  };\n}\n\nexport function fetchQuote(currency, id) {\n  return function (dispatch) {\n    dispatch(requestQuote());\n    return fetch(`https://api.coinmarketcap.com/v2/ticker/${id}/?structure=array&convert=${currency}`)\n      .then(\n      response => response.json(),\n      error => console.log('An error occurred.', error),\n    )\n      .then((json) => {\n        dispatch(receivedQuote(json));\n      },\n    );\n  };\n}\n\nexport function fetchPostAndQuote(currency, id) {\n  return function (dispatch) {\n      dispatch(fetchPost(currency, id)).then(() => {\n        dispatch(fetchQuote('BTC', id))\n    })\n  };\n}\n\nexport function fetchCurrencyAndPosts(currency) {\n  return function (dispatch) {\n    dispatch(requestCurrency(currency));\n    dispatch(fetchPosts(currency));\n  };\n}\n","import { SELECT_CURRENCY, REQUEST_POSTS, RECEIVE_POSTS, REQUEST_POST, RECEIVE_POST, REQUEST_QUOTE, RECEIVE_QUOTE, TOGGLE_SETTINGS, TOGGLE_ARTICLE } from '../actions';\n\nconst reducer = (state = {}, action) => {\n  switch (action.type) {\n    case SELECT_CURRENCY:\n      return { ...state, currency: action.currency };\n    case REQUEST_POSTS:\n      return { ...state, article: null, loading: true };\n    case RECEIVE_POSTS:\n      return { ...state, json: action.json, loading: false };\n    case REQUEST_POST:\n      return { ...state, loading: true };\n    case RECEIVE_POST: \n      return { ...state, article: action.json.data[0], loading: false };\n    case REQUEST_QUOTE:\n      return { ...state, loading: true };\n    case RECEIVE_QUOTE: \n      return { ...state, article: {...state.article, quotes: Object.assign(state.article.quotes, action.json.data[0].quotes) }, loading: false }\n    case TOGGLE_SETTINGS:\n      return { ...state, showSettings: !Boolean(state.showSettings) };\n    case TOGGLE_ARTICLE:\n      return { ...state, showArticle: action.show };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { fetchCurrencyAndPosts } from '../actions'\n\nlet Currency = ({ CurrencyName, CurrencyString, getCurrency, active, id }) => (\n    <div  className=\"col-sm-3\">\n        <div className=\"currency-button\" onClick={() => getCurrency(CurrencyString, id)}\n            style={{ backgroundColor: active === CurrencyString ? '#ffa500' : 'inherit' }}>\n            <p>{CurrencyName}</p>\n        </div>\n    </div>\n)\n\nconst mapStateToProps = (state) => ({\n    active: state.currency,\n    id: state.id\n})\n\nconst mapDispatchToProps = {\n    getCurrency: fetchCurrencyAndPosts\n}\n\nCurrency = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Currency)\n\nexport default Currency;\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport Currency from './Currency'\nimport { toggleSettings } from '../actions'\n\nlet CurrencyList = ({show, toggle}) => {\n  let settings = null; \n  if (show)\n    settings = <div className=\"row\">\n    <Currency CurrencyName=\"EUR\" CurrencyString=\"EUR\" />\n    <Currency CurrencyName=\"USD\" CurrencyString=\"USD\" />\n    <Currency CurrencyName=\"CNY\" CurrencyString=\"CNY\" />\n    </div>;\n  return <div>\n    <button\n      onClick={() => { toggle() }}\n      className=\"btn btn-primary btn-lg btn-block\" >\n      FIAT settings\n    </button>\n    {settings}\n  </div>\n}\n\nconst mapStateToProps = (state) => ({\n  show: state.showSettings\n})\n\nconst mapDispatchToProps = {\n  toggle: toggleSettings\n}\n\nCurrencyList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CurrencyList)\n\nexport default CurrencyList;\n\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { fetchPosts } from '../actions'\n\nlet Button = ({ getPosts, currency }) => (\n  <button\n    onClick={() => { getPosts(currency) }}\n    className=\"btn btn-primary btn-lg btn-block\" >\n    CRYPTO list\n  </button>\n);\n\nconst mapStateToProps = (state) => ({\n  currency: state.currency\n})\n\nconst mapDispatchToProps = {\n  getPosts: fetchPosts\n}\n\nButton = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Button)\n\nexport default Button;","import React from 'react'\nimport { connect } from 'react-redux'\nimport { fetchPostAndQuote, toggleArticle } from '../actions'\n\nlet ButtonDetails = ({ getPost, showArticle, currency, id, title }) => (\n  <button\n    onClick={() => { ( id ? getPost(currency, id) : showArticle(false) ) }}\n    className=\"btn btn-primary btn-lg btn-block\" >\n    {title}\n  </button>\n);\n\nconst mapStateToProps = (state) => ({\n  currency: state.currency\n})\n\nconst mapDispatchToProps = {\n  getPost: fetchPostAndQuote,\n  showArticle : toggleArticle\n}\n\nButtonDetails = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ButtonDetails)\n\nexport default ButtonDetails;\n","import React from 'react';\nimport { get } from 'lodash';\nimport ButtonDetails from '../containers/ButtonDetails'\n\nconst Article = ({ article, currency }) => (\n  <article>\n    <div className=\"article-wrapper\">\n      <p className=\"text-center\">{article.rank}</p>\n      <p className=\"text-center\">{article.symbol}</p>\n      <p className=\"text-center\">{get(article, `quotes.${currency}.price`)}</p>\n      <p className=\"text-center\">{get(article, `quotes.${currency}.percent_change_24h`)}</p>  \n      <ButtonDetails id={article.id} title=\"More\"/>\n    </div>\n  </article>\n);\n\nexport default Article ;\n\n\n","import React from 'react';\nimport { get } from 'lodash';\nimport ButtonDetails from '../containers/ButtonDetails'\n\nconst ArticleDetails = ({ article, currency }) => (\n  <article className=\"col-sm-12\">\n    <div className=\"article-wrapper\">\n      <p className=\"text-center\">Rank: {article.rank}</p>\n      <p className=\"text-center\">Name: {article.name}</p>\n      <p className=\"text-center\">Symbol: {article.symbol}</p>\n      <p className=\"text-center\">Price: {get(article, `quotes.${currency}.price`)}</p>\n      <p className=\"text-center\">24h volume: {get(article, `quotes.${currency}.volume_24h`)}</p>\n      <p className=\"text-center\">Market cap: {get(article, `quotes.${currency}.market_cap`)}</p>\n      <p className=\"text-center\">Price [BTC]: {get(article, `quotes.BTC.price`)}</p>\n      <p className=\"text-center\">1h change: {get(article, `quotes.${currency}.percent_change_1h`)}</p>\n      <p className=\"text-center\">24h change: {get(article, `quotes.${currency}.percent_change_24h`)}</p>\n      <p className=\"text-center\">7d change: {get(article, `quotes.${currency}.percent_change_7d`)}</p>\n    </div>\n    <ButtonDetails id={null} title=\"Close\"/>\n  </article>\n);\n\nexport default ArticleDetails;\n\n\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport  Article  from '../components/Article';\nimport  ArticleDetails  from '../components/ArticleDetails';\n\nlet ArticleList = ({ articles, showArticle, article, currency, loading }) => {\n    let list = null;\n    if (showArticle)\n        list = <ArticleDetails article={article} currency={currency} />\n    else if (articles) {\n        list = articles.map((article) =>\n            (\n                <div key={article.id} className=\"col-sm-6\">\n                    <Article article={article} currency={currency} />\n                </div>\n            )\n        )\n    }\n    if (loading) {\n        list = <div className=\"loading\">\n                    <div className=\"loader\"></div>\n                  </div>\n    }\n    return (\n        <div className=\"crypto-list row\">\n            {list}\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    articles: state.json,\n    article: state.article,\n    showArticle: state.showArticle,\n    currency: state.currency,\n    loading: state.loading\n})\n\nArticleList = connect(\n    mapStateToProps,\n    null\n)(ArticleList)\n\nexport default ArticleList;\n\n","import React from 'react'\nimport CurrencyList from './containers/CurrencyList'\nimport Button from './containers/Button'\nimport ArticleList from './containers/ArticleList'\n\nconst App = () => (\n  <div className=\"container\">\n    <CurrencyList />\n    <Button />\n    <ArticleList />\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport { logger } from 'redux-logger'\nimport reducer from './reducers'\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(\n    reducer,\n    applyMiddleware(thunk, logger)\n  )\n\nReactDOM.render(<Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}